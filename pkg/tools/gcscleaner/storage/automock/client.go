// Code generated by mockery v2.33.1. DO NOT EDIT.

package automock

import (
	context "context"
	"github.com/kyma-project/test-infra/pkg/tools/gcscleaner/storage"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Bucket provides a mock function with given fields: bucketName
func (_m *Client) Bucket(bucketName string) storage.BucketHandle {
	ret := _m.Called(bucketName)

	var r0 storage.BucketHandle
	if rf, ok := ret.Get(0).(func(string) storage.BucketHandle); ok {
		r0 = rf(bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.BucketHandle)
		}
	}

	return r0
}

// Buckets provides a mock function with given fields: ctx, projectID
func (_m *Client) Buckets(ctx context.Context, projectID string) storage.BucketIterator {
	ret := _m.Called(ctx, projectID)

	var r0 storage.BucketIterator
	if rf, ok := ret.Get(0).(func(context.Context, string) storage.BucketIterator); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.BucketIterator)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
