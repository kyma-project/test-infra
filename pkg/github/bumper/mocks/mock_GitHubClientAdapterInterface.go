// Code generated by mockery v2.53.3. DO NOT EDIT.

package bumpermocks

import (
	mock "github.com/stretchr/testify/mock"
	github "sigs.k8s.io/prow/pkg/github"
)

// MockGitHubClientAdapterInterface is an autogenerated mock type for the GitHubClientAdapterInterface type
type MockGitHubClientAdapterInterface struct {
	mock.Mock
}

type MockGitHubClientAdapterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitHubClientAdapterInterface) EXPECT() *MockGitHubClientAdapterInterface_Expecter {
	return &MockGitHubClientAdapterInterface_Expecter{mock: &_m.Mock}
}

// CreateFork provides a mock function with given fields: owner, repo
func (_m *MockGitHubClientAdapterInterface) CreateFork(owner string, repo string) (string, error) {
	ret := _m.Called(owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for CreateFork")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(owner, repo)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(owner, repo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitHubClientAdapterInterface_CreateFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFork'
type MockGitHubClientAdapterInterface_CreateFork_Call struct {
	*mock.Call
}

// CreateFork is a helper method to define mock.On call
//   - owner string
//   - repo string
func (_e *MockGitHubClientAdapterInterface_Expecter) CreateFork(owner interface{}, repo interface{}) *MockGitHubClientAdapterInterface_CreateFork_Call {
	return &MockGitHubClientAdapterInterface_CreateFork_Call{Call: _e.mock.On("CreateFork", owner, repo)}
}

func (_c *MockGitHubClientAdapterInterface_CreateFork_Call) Run(run func(owner string, repo string)) *MockGitHubClientAdapterInterface_CreateFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitHubClientAdapterInterface_CreateFork_Call) Return(_a0 string, _a1 error) *MockGitHubClientAdapterInterface_CreateFork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitHubClientAdapterInterface_CreateFork_Call) RunAndReturn(run func(string, string) (string, error)) *MockGitHubClientAdapterInterface_CreateFork_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepo provides a mock function with given fields: owner, name
func (_m *MockGitHubClientAdapterInterface) GetRepo(owner string, name string) (github.FullRepo, error) {
	ret := _m.Called(owner, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRepo")
	}

	var r0 github.FullRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (github.FullRepo, error)); ok {
		return rf(owner, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) github.FullRepo); ok {
		r0 = rf(owner, name)
	} else {
		r0 = ret.Get(0).(github.FullRepo)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitHubClientAdapterInterface_GetRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepo'
type MockGitHubClientAdapterInterface_GetRepo_Call struct {
	*mock.Call
}

// GetRepo is a helper method to define mock.On call
//   - owner string
//   - name string
func (_e *MockGitHubClientAdapterInterface_Expecter) GetRepo(owner interface{}, name interface{}) *MockGitHubClientAdapterInterface_GetRepo_Call {
	return &MockGitHubClientAdapterInterface_GetRepo_Call{Call: _e.mock.On("GetRepo", owner, name)}
}

func (_c *MockGitHubClientAdapterInterface_GetRepo_Call) Run(run func(owner string, name string)) *MockGitHubClientAdapterInterface_GetRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGitHubClientAdapterInterface_GetRepo_Call) Return(_a0 github.FullRepo, _a1 error) *MockGitHubClientAdapterInterface_GetRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitHubClientAdapterInterface_GetRepo_Call) RunAndReturn(run func(string, string) (github.FullRepo, error)) *MockGitHubClientAdapterInterface_GetRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitHubClientAdapterInterface creates a new instance of MockGitHubClientAdapterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitHubClientAdapterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitHubClientAdapterInterface {
	mock := &MockGitHubClientAdapterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
