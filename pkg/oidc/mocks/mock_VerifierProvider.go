// Code generated by mockery v2.38.0. DO NOT EDIT.

package oidcmocks

import (
	oidc "github.com/coreos/go-oidc/v3/oidc"
	mock "github.com/stretchr/testify/mock"
)

// MockVerifierProvider is an autogenerated mock type for the VerifierProvider type
type MockVerifierProvider struct {
	mock.Mock
}

type MockVerifierProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifierProvider) EXPECT() *MockVerifierProvider_Expecter {
	return &MockVerifierProvider_Expecter{mock: &_m.Mock}
}

// Verifier provides a mock function with given fields: _a0
func (_m *MockVerifierProvider) Verifier(_a0 *oidc.Config) *oidc.IDTokenVerifier {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Verifier")
	}

	var r0 *oidc.IDTokenVerifier
	if rf, ok := ret.Get(0).(func(*oidc.Config) *oidc.IDTokenVerifier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.IDTokenVerifier)
		}
	}

	return r0
}

// MockVerifierProvider_Verifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verifier'
type MockVerifierProvider_Verifier_Call struct {
	*mock.Call
}

// Verifier is a helper method to define mock.On call
//   - _a0 *oidc.Config
func (_e *MockVerifierProvider_Expecter) Verifier(_a0 interface{}) *MockVerifierProvider_Verifier_Call {
	return &MockVerifierProvider_Verifier_Call{Call: _e.mock.On("Verifier", _a0)}
}

func (_c *MockVerifierProvider_Verifier_Call) Run(run func(_a0 *oidc.Config)) *MockVerifierProvider_Verifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oidc.Config))
	})
	return _c
}

func (_c *MockVerifierProvider_Verifier_Call) Return(_a0 *oidc.IDTokenVerifier) *MockVerifierProvider_Verifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifierProvider_Verifier_Call) RunAndReturn(run func(*oidc.Config) *oidc.IDTokenVerifier) *MockVerifierProvider_Verifier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifierProvider creates a new instance of MockVerifierProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifierProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifierProvider {
	mock := &MockVerifierProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
