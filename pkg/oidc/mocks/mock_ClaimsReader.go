// Code generated by mockery v2.46.3. DO NOT EDIT.

package oidcmocks

import mock "github.com/stretchr/testify/mock"

// MockClaimsReader is an autogenerated mock type for the ClaimsReader type
type MockClaimsReader struct {
	mock.Mock
}

type MockClaimsReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClaimsReader) EXPECT() *MockClaimsReader_Expecter {
	return &MockClaimsReader_Expecter{mock: &_m.Mock}
}

// Claims provides a mock function with given fields: _a0
func (_m *MockClaimsReader) Claims(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Claims")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClaimsReader_Claims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Claims'
type MockClaimsReader_Claims_Call struct {
	*mock.Call
}

// Claims is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockClaimsReader_Expecter) Claims(_a0 interface{}) *MockClaimsReader_Claims_Call {
	return &MockClaimsReader_Claims_Call{Call: _e.mock.On("Claims", _a0)}
}

func (_c *MockClaimsReader_Claims_Call) Run(run func(_a0 interface{})) *MockClaimsReader_Claims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockClaimsReader_Claims_Call) Return(_a0 error) *MockClaimsReader_Claims_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClaimsReader_Claims_Call) RunAndReturn(run func(interface{}) error) *MockClaimsReader_Claims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClaimsReader creates a new instance of MockClaimsReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClaimsReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClaimsReader {
	mock := &MockClaimsReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
