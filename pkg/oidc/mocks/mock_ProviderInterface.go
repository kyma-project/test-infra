// Code generated by mockery v2.46.3. DO NOT EDIT.

package oidcmocks

import (
	oidc "github.com/kyma-project/test-infra/pkg/oidc"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderInterface is an autogenerated mock type for the ProviderInterface type
type MockProviderInterface struct {
	mock.Mock
}

type MockProviderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderInterface) EXPECT() *MockProviderInterface_Expecter {
	return &MockProviderInterface_Expecter{mock: &_m.Mock}
}

// NewVerifier provides a mock function with given fields: _a0
func (_m *MockProviderInterface) NewVerifier(_a0 oidc.VerifierConfig) oidc.TokenVerifier {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewVerifier")
	}

	var r0 oidc.TokenVerifier
	if rf, ok := ret.Get(0).(func(oidc.VerifierConfig) oidc.TokenVerifier); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(oidc.TokenVerifier)
	}

	return r0
}

// MockProviderInterface_NewVerifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewVerifier'
type MockProviderInterface_NewVerifier_Call struct {
	*mock.Call
}

// NewVerifier is a helper method to define mock.On call
//   - _a0 oidc.VerifierConfig
func (_e *MockProviderInterface_Expecter) NewVerifier(_a0 interface{}) *MockProviderInterface_NewVerifier_Call {
	return &MockProviderInterface_NewVerifier_Call{Call: _e.mock.On("NewVerifier", _a0)}
}

func (_c *MockProviderInterface_NewVerifier_Call) Run(run func(_a0 oidc.VerifierConfig)) *MockProviderInterface_NewVerifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(oidc.VerifierConfig))
	})
	return _c
}

func (_c *MockProviderInterface_NewVerifier_Call) Return(_a0 oidc.TokenVerifier) *MockProviderInterface_NewVerifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderInterface_NewVerifier_Call) RunAndReturn(run func(oidc.VerifierConfig) oidc.TokenVerifier) *MockProviderInterface_NewVerifier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderInterface creates a new instance of MockProviderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderInterface {
	mock := &MockProviderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
