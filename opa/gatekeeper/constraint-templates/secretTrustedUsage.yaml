apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: secrettrustedusage
  annotations:
    metadata.gatekeeper.sh/title: "Secret Trusted Usage"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Controls any Pod ability to use restricted secret.
spec:
  crd:
    spec:
      names:
        kind: SecretTrustedUsage
      validation:
        openAPIV3Schema:
          type: object
          description: >-
            Controls any Pod ability to use use restricted secret.
          properties:
            labels:
              type: array
              description: >-
                A list of labels and values the object must specify.
              items:
                type: object
                properties:
                  key:
                    type: string
                    description: >-
                      The required label.
                  allowedRegex:
                    type: string
                    description: >-
                      Regular expression the label's value must match. The value must contain one exact match for
                      the regular expression.
            restrictedSecrets:
              type: array
              description: >-
                A list of restricted secrets.
              items:
                type: string
                description: >-
                  The restricted secret name.
            trustedServiceAccounts:
              type: array
              description: >-
                A list of trusted service accounts. If a Pod match criteria from trustedServiceAccount, it is allowed to use restricted secret.
              items:
                type: string
                description: >-
                  The trusted service account name.
            trustedImages:
              type: array
              description: >-
                A list of trusted images. If a Pod match criteria from trustedImage, it is allowed to use restricted secret.
              items:
                type: object
                description: >-
                  The trusted image criteria.
                properties:
                  image:
                    type: string
                    description: >-
                      The container trusted image name.
                  command:
                    type: array
                    description: >-
                      The list of container trusted commands to run.
                    items:
                      type: string
                      description: >-
                        The trusted command to run.
                  args:
                    type: array
                    description: >-
                      The trusted arguments to pass to the command.
                    items:
                      type: string
                      description: >-
                        The trusted argument to pass to the command.
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package kubernetes.secrettrustedusage
        
        import future.keywords.contains
        import future.keywords.if
        import future.keywords.in
  
        # Report violation if the container is using a restricted secret and does not match trusted usage criteria.
        # Violation is check if secret is used in env.envFrom container spec.
        violation[{"msg": msg}] {
          some k
          # Iterate over all containers in the pod.
          container := input_containers[_]
        
          # Check if the container is using a restricted secret.
          container.envFrom[_].secretRef.name == input.parameters.restrictedSecrets[k]
        
          # Check if container is not matching trusted usage criteria.
          not trustedUsages(container)
        
          # Format violation message.
          msg := sprintf("Container %v is not allowed to use restricted secret: %v.", [container.name, input.parameters.restrictedSecrets[k]])
        }
  
        # Report violation if the container is using a restricted secret and does not match trusted usage criteria.
        # Violation is check if secret is used in env.valueFrom container spec.
        violation[{"msg": msg}] {
          some k
          # Iterate over all containers in the pod.
          container := input_containers[_]
        
          # Check if the container is using a restricted secret.
          container.env[_].valueFrom.secretKeyRef.name == input.parameters.restrictedSecrets[k]
        
          # Check if container is not matching trusted usage criteria.
          not trustedUsages(container)
        
          # Format violation message.
          msg := sprintf("Container %v is not allowed to use restricted secret: %v.", [container.name, input.parameters.restrictedSecrets[k]])
        }
  
        # Report violation if the container is using a restricted secret and does not match trusted usage criteria.
        # Violation is check if secret is mount as volume.
        violation[{"msg": msg}] {
          some k, j
          # Iterate over all containers in the pod.
          container := input_containers[_]
        
          # Check if the container is using a restricted secret.
          input.review.object.spec.volumes[j].secret.secretName == input.parameters.restrictedSecrets[k]
          container.volumeMounts[_].name == input.review.object.spec.volumes[j].name
        
          # Check if container is not matching trusted usage criteria.
          not trustedUsages(container)
        
          # Format violation message.
          msg := sprintf("Container %v is not allowed to use restricted secret: %v.", [container.name, input.parameters.restrictedSecrets[k]])
        }
        
        trustedUsages(container) {
          some j
          trustedSA := object.get(input.parameters, "trustedServiceAccounts", [input.review.object.spec.serviceAccountName])
          input.review.object.spec.serviceAccountName == trustedSA[_]
          glob.match(input.parameters.trustedImages[j].image, null, container.image)
          checkCommand(container, input.parameters.trustedImages[j])
          checkArgs(container, input.parameters.trustedImages[j])
          checkLabels(input.review.object, input.parameters)
        }
  
        # Check if trusted usage criteria does not define required labels.
        # Function evaluate too true if required labels are not defined.
        checkLabels(reviewObject, inputParameters) if {
          paramLabels := object.get(inputParameters, "labels", [])
        
          # Check if the required labels array is empty.
          count(paramLabels) == 0
  
          # Getting pod labels to prevent unused variable error.
          _ := object.get(reviewObject.metadata, "labels", [])
        }
  
        # Check if the pod has required labels.
        checkLabels(reviewObject, inputParameters) if {
          # Check if the required labels array is not empty.
          paramLabels := object.get(inputParameters, "labels", [])
          count(paramLabels) > 0
        
          # Check if the pod labels array is not empty.
          reviewLabels := object.get(reviewObject.metadata, "labels", [])
          count(reviewLabels) > 0
        
          # Check if the pod has required labels.
          value := reviewLabels[key]
          expected := input.parameters.labels[_]
          expected.key == key
        
          # Check if the label value matches the regular expression.
          # If the required label does not define allowedRegex, use default value ".*" to match any value.
          reg := object.get(expected, "allowedRegex", ".*")
          regex.match(reg, value)
        }
  
        # Check if trusted usage criteria does not define trusted commands.
        checkCommand(container, trustedImage) if {
          trustedCommand := object.get(trustedImage, "command", [])
          count(trustedCommand) == 0
        
          # Getting container command to prevent unused variable error.
          _ := object.get(container, "command", [])
        }
  
        # Check if the container is using a trusted commands.
        # Function evaluate too true if the container is using exactly the same trusted commands.
        # Number and order of commands must match.
        checkCommand(container, trustedImage) if {
          trustedCommand := object.get(trustedImage, "command", [])
          containerCommand := object.get(container, "command", [])
          count(containerCommand) == count(trustedCommand)
        
          # Allow using wildcard to match variable part of the command.
          glob.match(trustedCommand[i], null, containerCommand[i])
        }
  
        # Check if trusted usage criteria does not define trusted arguments.
        checkArgs(container, trustedImage) if {
          trustedArgs := object.get(trustedImage, "args", [])
          count(trustedArgs) == 0
        
          # Getting container args to prevent unused variable error.
          _ := object.get(container, "args", [])
        }
  
        # Check if the container is using a trusted arguments.
        # Function evaluate too true if the container is using exactly the same trusted arguments.
        # Number and order of commands must match.
        checkArgs(container, trustedImage) if {
          trustedArgs := object.get(trustedImage, "args", [])
          containerArgs := object.get(container, "args", [])
          count(containerArgs) == count(trustedArgs)
  
          # Allow using wildcard to match variable part of the argument.
          glob.match(trustedArgs[i], null, containerArgs[i])
        }
  
        # Get all pod containers.
        input_containers contains c if {
          c := input.review.object.spec.containers[_]
        }
  
        # Get all pod init containers.
        input_containers contains c if {
          c := input.review.object.spec.initContainers[_]
        }
