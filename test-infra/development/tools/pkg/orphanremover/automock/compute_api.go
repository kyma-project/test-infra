// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import compute "google.golang.org/api/compute/v1"
import mock "github.com/stretchr/testify/mock"

// ComputeAPI is an autogenerated mock type for the ComputeAPI type
type ComputeAPI struct {
	mock.Mock
}

// CheckInstance provides a mock function with given fields: project, zone, name
func (_m *ComputeAPI) CheckInstance(project string, zone string, name string) bool {
	ret := _m.Called(project, zone, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(project, zone, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteBackendService provides a mock function with given fields: project, backendService
func (_m *ComputeAPI) DeleteBackendService(project string, backendService string) {
	_m.Called(project, backendService)
}

// DeleteForwardingRule provides a mock function with given fields: project, name, region
func (_m *ComputeAPI) DeleteForwardingRule(project string, name string, region string) {
	_m.Called(project, name, region)
}

// DeleteGlobalForwardingRule provides a mock function with given fields: project, name
func (_m *ComputeAPI) DeleteGlobalForwardingRule(project string, name string) {
	_m.Called(project, name)
}

// DeleteHTTPProxy provides a mock function with given fields: project, httpProxy
func (_m *ComputeAPI) DeleteHTTPProxy(project string, httpProxy string) {
	_m.Called(project, httpProxy)
}

// DeleteHealthChecks provides a mock function with given fields: project, names
func (_m *ComputeAPI) DeleteHealthChecks(project string, names []string) {
	_m.Called(project, names)
}

// DeleteInstanceGroup provides a mock function with given fields: project, zone, instanceGroup
func (_m *ComputeAPI) DeleteInstanceGroup(project string, zone string, instanceGroup string) {
	_m.Called(project, zone, instanceGroup)
}

// DeleteTargetPool provides a mock function with given fields: project, name, region
func (_m *ComputeAPI) DeleteTargetPool(project string, name string, region string) {
	_m.Called(project, name, region)
}

// DeleteURLMap provides a mock function with given fields: project, urlMap
func (_m *ComputeAPI) DeleteURLMap(project string, urlMap string) {
	_m.Called(project, urlMap)
}

// LookupBackendServices provides a mock function with given fields: project
func (_m *ComputeAPI) LookupBackendServices(project string) ([]*compute.BackendService, error) {
	ret := _m.Called(project)

	var r0 []*compute.BackendService
	if rf, ok := ret.Get(0).(func(string) []*compute.BackendService); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compute.BackendService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupGlobalForwardingRule provides a mock function with given fields: project
func (_m *ComputeAPI) LookupGlobalForwardingRule(project string) ([]*compute.ForwardingRule, error) {
	ret := _m.Called(project)

	var r0 []*compute.ForwardingRule
	if rf, ok := ret.Get(0).(func(string) []*compute.ForwardingRule); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compute.ForwardingRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupHTTPProxy provides a mock function with given fields: project
func (_m *ComputeAPI) LookupHTTPProxy(project string) ([]*compute.TargetHttpProxy, error) {
	ret := _m.Called(project)

	var r0 []*compute.TargetHttpProxy
	if rf, ok := ret.Get(0).(func(string) []*compute.TargetHttpProxy); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compute.TargetHttpProxy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupInstanceGroup provides a mock function with given fields: project, zone
func (_m *ComputeAPI) LookupInstanceGroup(project string, zone string) ([]string, error) {
	ret := _m.Called(project, zone)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(project, zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupTargetPools provides a mock function with given fields: project
func (_m *ComputeAPI) LookupTargetPools(project string) ([]*compute.TargetPool, error) {
	ret := _m.Called(project)

	var r0 []*compute.TargetPool
	if rf, ok := ret.Get(0).(func(string) []*compute.TargetPool); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compute.TargetPool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupURLMaps provides a mock function with given fields: project
func (_m *ComputeAPI) LookupURLMaps(project string) ([]*compute.UrlMap, error) {
	ret := _m.Called(project)

	var r0 []*compute.UrlMap
	if rf, ok := ret.Get(0).(func(string) []*compute.UrlMap); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compute.UrlMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupZones provides a mock function with given fields: project, pattern
func (_m *ComputeAPI) LookupZones(project string, pattern string) ([]string, error) {
	ret := _m.Called(project, pattern)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(project, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
