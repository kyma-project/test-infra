apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.appName | quote }}
    release: {{ .Release.Name | quote }}
    event: {{ .Values.eventType | quote }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.appName | quote }}
      release: {{ .Release.Name | quote }}
      event: {{ .Values.eventType | quote }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName | quote }}
        release: {{ .Release.Name | quote }}
        event: {{ .Values.eventType | quote }}
    spec:
      containers:
      - name: {{ .Values.container.name }}
        imagePullPolicy: Always
        image: {{ .Values.container.image }}
        resources:
          limits:
            memory: {{ .Values.container.resources.limits.mem }}
            cpu: {{ .Values.container.resources.limits.cpu }}
        ports:
        - containerPort: {{ .Values.container.containerPort }}
        env:
        - name: EVENTING_SERVICE
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: kymaEventingProxy
        - name: LISTEN_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: listenPort
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: appName
        - name: LOG_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: appName
        - name: COMPONENT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: component
        - name: FIRESTORE_GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: firebaseProjectID
        - name: FIRESTORE_COLLECTION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: firestoreCollectionName
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/etc/googleServiceAccountKey/key"
        volumeMounts:
        - name: google-service-account-key
          mountPath: "/etc/googleServiceAccountKey"
          readOnly: true
      volumes:
      - name: google-service-account-key
        secret:
          secretName: {{ .Release.Name }}-{{ .Values.gcpServiceAccount }}
