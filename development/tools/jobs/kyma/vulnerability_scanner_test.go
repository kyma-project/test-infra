package kyma_test

import (
	"testing"

	"github.com/kyma-project/test-infra/development/tools/jobs/tester"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestKymaVulnerabilityScannerPeriodics(t *testing.T) {

	// WHEN
	jobConfig, err := tester.ReadJobConfig("./../../../../prow/jobs/kyma/kyma-vulnerability-scanner.yaml")
	// THEN
	require.NoError(t, err)

	periodics := jobConfig.Periodics

	assert.Len(t, periodics, 2)

	expName := "kyma-vulnerabilites-scan"
	vulnerabilitesScanPeriodic := tester.FindPeriodicJobByName(periodics, expName)
	require.NotNil(t, vulnerabilitesScanPeriodic)
	assert.Equal(t, expName, vulnerabilitesScanPeriodic.Name)
	assert.True(t, vulnerabilitesScanPeriodic.Decorate)
	assert.Equal(t, "0 6 * * 1", vulnerabilitesScanPeriodic.Cron)
	tester.AssertThatHasPresets(t, vulnerabilitesScanPeriodic.JobBase, "preset-sap-slack-bot-token")
	tester.AssertThatHasPresets(t, vulnerabilitesScanPeriodic.JobBase, "preset-kyma-snyk-token")
	tester.AssertThatHasExtraRefs(t, vulnerabilitesScanPeriodic.JobBase.UtilityConfig, []string{"test-infra", "kyma"})
	assert.Equal(t, "eu.gcr.io/kyma-project/test-infra/vulnerability-scanner:v20190226-14fa550", vulnerabilitesScanPeriodic.Spec.Containers[0].Image)
	assert.Equal(t, []string{"bash"}, vulnerabilitesScanPeriodic.Spec.Containers[0].Command)
	assert.Equal(t, []string{"-c", "${KYMA_PROJECT_DIR}/test-infra/development/vulnerabilities-scanner.sh"}, vulnerabilitesScanPeriodic.Spec.Containers[0].Args)
	tester.AssertThatSpecifiesResourceRequests(t, vulnerabilitesScanPeriodic.JobBase)
	assert.Len(t, vulnerabilitesScanPeriodic.Spec.Containers[0].Env, 1)
	tester.AssertThatContainerHasEnv(t, vulnerabilitesScanPeriodic.Spec.Containers[0], "KYMA_PROJECT_DIR", "/home/prow/go/src/github.com/kyma-project")
}
