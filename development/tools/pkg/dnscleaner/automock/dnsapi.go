// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	context "context"

	dns "google.golang.org/api/dns/v1"

	mock "github.com/stretchr/testify/mock"
)

// DNSAPI is an autogenerated mock type for the DNSAPI type
type DNSAPI struct {
	mock.Mock
}

// LookupDNSEntry provides a mock function with given fields: ctx, project, zone, name, address, recordType, recordTTL
func (_m *DNSAPI) LookupDNSEntry(ctx context.Context, project string, zone string, name string, address string, recordType string, recordTTL int64) (*dns.ResourceRecordSet, error) {
	ret := _m.Called(ctx, project, zone, name, address, recordType, recordTTL)

	var r0 *dns.ResourceRecordSet
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, int64) *dns.ResourceRecordSet); ok {
		r0 = rf(ctx, project, zone, name, address, recordType, recordTTL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.ResourceRecordSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, int64) error); ok {
		r1 = rf(ctx, project, zone, name, address, recordType, recordTTL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDNSEntry provides a mock function with given fields: ctx, project, zone, record
func (_m *DNSAPI) RemoveDNSEntry(ctx context.Context, project string, zone string, record *dns.ResourceRecordSet) error {
	ret := _m.Called(ctx, project, zone, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *dns.ResourceRecordSet) error); ok {
		r0 = rf(ctx, project, zone, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
