// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import dns "google.golang.org/api/dns/v1"

import mock "github.com/stretchr/testify/mock"

// DNSAPI is an autogenerated mock type for the DNSAPI type
type DNSAPI struct {
	mock.Mock
}

// LookupDNSEntry provides a mock function with given fields: project, zone, name, address, recordType, recordTTL
func (_m *DNSAPI) LookupDNSEntry(project string, zone string, name string, address string, recordType string, recordTTL int64) (*dns.ResourceRecordSet, bool, error) {
	ret := _m.Called(project, zone, name, address, recordType, recordTTL)

	var r0 *dns.ResourceRecordSet
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int64) *dns.ResourceRecordSet); ok {
		r0 = rf(project, zone, name, address, recordType, recordTTL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.ResourceRecordSet)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int64) bool); ok {
		r1 = rf(project, zone, name, address, recordType, recordTTL)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, string, string, int64) error); ok {
		r2 = rf(project, zone, name, address, recordType, recordTTL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveDNSEntry provides a mock function with given fields: project, zone, record
func (_m *DNSAPI) RemoveDNSEntry(project string, zone string, record *dns.ResourceRecordSet) (bool, error) {
	ret := _m.Called(project, zone, record)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, *dns.ResourceRecordSet) bool); ok {
		r0 = rf(project, zone, record)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *dns.ResourceRecordSet) error); ok {
		r1 = rf(project, zone, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
