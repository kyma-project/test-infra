package vulnerabilitycollector

import (
	"context"
	"fmt"
	"os"

	containeranalysis "cloud.google.com/go/containeranalysis/apiv1beta1"
	"github.com/nlopes/slack"
	"google.golang.org/api/iterator"
	grafeaspb "google.golang.org/genproto/googleapis/devtools/containeranalysis/v1beta1/grafeas"
)

// getOccurrence retrieves and prints a specified Occurrence from the server.
// findVulnerabilityOccurrencesForImage retrieves all vulnerability Occurrences associated with a resource.

//FindVulnerabilityOccurrencesForImage returns vulnerability occurances
func FindVulnerabilityOccurrencesForImage(resourceURL, projectID string) ([]*grafeaspb.Occurrence, error) {
	ctx := context.Background()
	client, err := containeranalysis.NewGrafeasV1Beta1Client(ctx)
	if err != nil {
		return nil, fmt.Errorf("NewGrafeasV1Beta1Client: %v", err)
	}
	defer client.Close()

	req := &grafeaspb.ListOccurrencesRequest{
		Parent: fmt.Sprintf("projects/%s", projectID),
		Filter: fmt.Sprintf("resourceUrl = %q kind = %q", resourceURL, "VULNERABILITY"),
	}

	var occurrenceList []*grafeaspb.Occurrence
	it := client.ListOccurrences(ctx, req)
	for {
		occ, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return nil, fmt.Errorf("occurrence iteration error: %v", err)
		}
		occurrenceList = append(occurrenceList, occ)
	}

	return occurrenceList, nil
}

// getOccurrence retrieves and prints a specified Occurrence from the server.
func getOccurrence(occurrenceID, projectID string) (*grafeaspb.Occurrence, error) {
	// occurrenceID := path.Base(occurrence.Name)
	ctx := context.Background()
	client, err := containeranalysis.NewGrafeasV1Beta1Client(ctx)
	if err != nil {
		return nil, fmt.Errorf("NewGrafeasV1Beta1Client: %v", err)
	}
	defer client.Close()

	req := &grafeaspb.GetOccurrenceRequest{
		Name: fmt.Sprintf("projects/%s/occurrences/%s", projectID, occurrenceID),
	}
	occ, err := client.GetOccurrence(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("client.GetOccurrence: %v", err)
	}
	return occ, nil
}

//WriteToSlack writes output to slack
func WriteToSlack(message string, high int, m map[string]string, total int) {
	api := slack.New(os.Getenv("SLACKKEY"))
	var highc string
	var countt string
	if high > 0 {
		highc = "B40404"
	} else {
		highc = "01DF01"
	}
	if total > 0 {
		countt = "B40404"
	} else {
		countt = "01DF01"
	}
	attachment := []slack.Attachment{
		slack.Attachment{
			Text:  fmt.Sprintf("%s%d", "High number vars: ", high),
			Color: fmt.Sprintf(highc),
		},
		slack.Attachment{
			Text:  fmt.Sprintf("%s%d", "total number vars: ", total),
			Color: fmt.Sprintf(countt),
		},
	}
	channelID, timestamp, err := api.PostMessage(os.Getenv("SLACKCHANNEL"), slack.MsgOptionText(fmt.Sprintf("%s%s", "Docker URL: ", message), false), slack.MsgOptionAttachments(attachment...))
	if err != nil {
		fmt.Printf("%s\n", err)
		return
	}
	fmt.Printf("Message successfully sent to channel %s at %s", channelID, timestamp)

}
