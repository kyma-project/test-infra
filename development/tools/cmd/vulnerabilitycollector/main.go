package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"strings"

	"google.golang.org/genproto/googleapis/devtools/containeranalysis/v1beta1/grafeas"

	log "github.com/sirupsen/logrus"

	"github.com/kyma-project/test-infra/development/tools/pkg/vulnerabilitycollector"
)

var (
	project     = flag.String("project", "", "Project ID [Required]")
	projectPath = flag.String("path", "", "Specify a sub-path in the project if you don't want to run against all public images")
	region      = flag.String("region", "", "Region shortcode, eu for Europe, us for United States, leave empty for global")
	dryRun      = flag.Bool("dryRun", true, "Dry Run enabled, nothing is deleted")
)

func main() {
	ctx := context.Background()
	flag.Parse()

	if *project == "" {
		fmt.Fprintln(os.Stderr, "missing -project flag")
		flag.Usage()
		os.Exit(2)
	}

	fmt.Println(*region)
	if *region != "" && *region != "us" && *region != "eu" {
		fmt.Fprintln(os.Stderr, "missing proper value for -region flag")
		flag.Usage()
		os.Exit(2)
	}

	changePrefix := ""
	if *dryRun {
		changePrefix = "[DRYRUN] "
	}

	imageList, err := vulnerabilitycollector.GetLatestImageList(ctx, *project, *region, *projectPath, !*dryRun)
	if err != nil {
		log.Fatalf("Couldn't get image list from Google Container registry: %s", err.Error())
	}

	var totalHighSeverityIssues int
	var occurenceList []*grafeas.Occurrence
	for _, url := range imageList {
		vs, err := vulnerabilitycollector.FindVulnerabilityOccurrencesForImage(ctx, *project, !*dryRun, url)
		if err != nil {
			log.Fatalf("Could not get authenticated client: %v", err)
		}

		log.Infof("Collecting vulnerabilities for %s", url)

		var totalNumberOfIssuesOnProject = len(vs)
		var countHighSeverityIssues int
		for _, element := range vs {
			req := element.GetVulnerability()
			if strings.Contains("HIGH", req.Severity.String()) {
				log.Warnf("Severity '%s' for package '%s' with version '%s'", req.Severity, req.PackageIssue[0].AffectedLocation.Package, req.PackageIssue[0].AffectedLocation.Version.Name)
				countHighSeverityIssues++
			}
		}
		if countHighSeverityIssues > 0 {
			log.Warnf("%sNumber of High issues %d", changePrefix, countHighSeverityIssues)
		}
		log.Infof("%sNumber of issues %d", changePrefix, totalNumberOfIssuesOnProject)
		totalHighSeverityIssues = totalHighSeverityIssues + countHighSeverityIssues
		occurenceList = append(occurenceList, vs...)
	}
	var totalNumberOfIssues = len(occurenceList)

	log.Infof("%sFound %d vulnerabilities for specified project in %d containers scanned", changePrefix, len(occurenceList), len(imageList))

	vulnerabilitycollector.WriteToSlack(!*dryRun, fmt.Sprintf("Scanned %d containers and found a total of %d vulnerabilities", len(imageList), totalNumberOfIssues), totalHighSeverityIssues, totalNumberOfIssues)

}
