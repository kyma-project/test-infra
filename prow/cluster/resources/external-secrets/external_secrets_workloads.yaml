apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: az-kyma-prow-credentials # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: azure-credentials.json # k8s key name
      remoteRef:
        key: workloads_default_az-kyma-prow-credentials # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: btp-operator-credentials # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: clientid # k8s key name
      remoteRef:
        key: workloads_default_btp-operator-credentials # GCP secret name
        property: clientid # name of the field in the GCP secret
        version: latest
    - secretKey: clientsecret # k8s key name
      remoteRef:
        key: workloads_default_btp-operator-credentials # GCP secret name
        property: clientsecret # name of the field in the GCP secret
        version: latest
    - secretKey: clusterid # k8s key name
      remoteRef:
        key: workloads_default_btp-operator-credentials # GCP secret name
        property: clusterid # name of the field in the GCP secret
        version: latest
    - secretKey: tokenurl # k8s key name
      remoteRef:
        key: workloads_default_btp-operator-credentials # GCP secret name
        property: tokenurl # name of the field in the GCP secret
        version: latest
    - secretKey: url # k8s key name
      remoteRef:
        key: workloads_default_btp-operator-credentials # GCP secret name
        property: url # name of the field in the GCP secret
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: btp-admin-credentials # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: clientid # k8s key name
      remoteRef:
        key: workloads_default_btp-admin-credentials # GCP secret name
        property: clientid # name of the field in the GCP secret
        version: latest
    - secretKey: clientsecret # k8s key name
      remoteRef:
        key: workloads_default_btp-admin-credentials # GCP secret name
        property: clientsecret # name of the field in the GCP secret
        version: latest
    - secretKey: clusterid # k8s key name
      remoteRef:
        key: workloads_default_btp-admin-credentials # GCP secret name
        property: clusterid # name of the field in the GCP secret
        version: latest
    - secretKey: tokenurl # k8s key name
      remoteRef:
        key: workloads_default_btp-admin-credentials # GCP secret name
        property: tokenurl # name of the field in the GCP secret
        version: latest
    - secretKey: url # k8s key name
      remoteRef:
        key: workloads_default_btp-admin-credentials # GCP secret name
        property: url # name of the field in the GCP secret
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: compass-dev-credentials # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: COMPASS_CLIENT_ID # k8s key name
      remoteRef:
        key: workloads_default_compass-dev-credentials # GCP secret name
        property: COMPASS_CLIENT_ID # name of the field in the GCP secret
        version: latest
    - secretKey: COMPASS_CLIENT_SECRET # k8s key name
      remoteRef:
        key: workloads_default_compass-dev-credentials # GCP secret name
        property: COMPASS_CLIENT_SECRET # name of the field in the GCP secret
        version: latest
    - secretKey: COMPASS_HOST # k8s key name
      remoteRef:
        key: workloads_default_compass-dev-credentials # GCP secret name
        property: COMPASS_HOST # name of the field in the GCP secret
        version: latest
    - secretKey: COMPASS_TENANT # k8s key name
      remoteRef:
        key: workloads_default_compass-dev-credentials # GCP secret name
        property: COMPASS_TENANT # name of the field in the GCP secret
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gardener-kyma-prow-kubeconfig # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: kubeconfig # k8s key name
      remoteRef:
        key: workloads_default_gardener-kyma-prow-kubeconfig # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gardener-skr-kyma-dev-kubeconfig # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: kubeconfig # k8s key name
      remoteRef:
        key: workloads_default_gardener-skr-kyma-dev-kubeconfig # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: keb-dev-credentials # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: KEB_CLIENT_ID # k8s key name
      remoteRef:
        key: workloads_default_keb-dev-credentials # GCP secret name
        property: KEB_CLIENT_ID # name of the field in the GCP secret
        version: latest
    - secretKey: KEB_CLIENT_SECRET # k8s key name
      remoteRef:
        key: workloads_default_keb-dev-credentials # GCP secret name
        property: KEB_CLIENT_SECRET # name of the field in the GCP secret
        version: latest
    - secretKey: KEB_GLOBALACCOUNT_ID # k8s key name
      remoteRef:
        key: workloads_default_keb-dev-credentials # GCP secret name
        property: KEB_GLOBALACCOUNT_ID # name of the field in the GCP secret
        version: latest
    - secretKey: KEB_HOST # k8s key name
      remoteRef:
        key: workloads_default_keb-dev-credentials # GCP secret name
        property: KEB_HOST # name of the field in the GCP secret
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-alerts-slack-api-url # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: secret # k8s key name
      remoteRef:
        key: workloads_default_kyma-alerts-slack-api-url # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-azure-credential-id # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: subscription-id # k8s key name
      remoteRef:
        key: workloads_default_kyma-azure-credential-id # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-azure-credential-secret # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: subscription-secret # k8s key name
      remoteRef:
        key: workloads_default_kyma-azure-credential-secret # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-azure-credential-tenant # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: subscription-tenant # k8s key name
      remoteRef:
        key: workloads_default_kyma-azure-credential-tenant # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-bot-github-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_kyma-bot-github-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-autobump-bot-github-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_kyma-autobump-bot-github-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-bot-npm-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_kyma-bot-npm-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-guard-bot-github-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_kyma-guard-bot-github-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-tunas-prow-event-mesh # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: serviceKey # k8s key name
      remoteRef:
        key: workloads_default_kyma-tunas-prow-event-mesh # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-tunas-release-testing-event-mesh # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: serviceKey # k8s key name
      remoteRef:
        key: workloads_default_kyma-tunas-release-testing-event-mesh # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: log-collector-slack-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_log-collector-slack-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: neighbors-alerts-slack-api-url # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: secret # k8s key name
      remoteRef:
        key: workloads_default_neighbors-alerts-slack-api-url # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: nightly-aks-github-integration-app-client-id # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: client-id # k8s key name
      remoteRef:
        key: workloads_default_nightly-aks-github-integration-app-client-id # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: nightly-aks-github-integration-app-client-secret # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: client-secret # k8s key name
      remoteRef:
        key: workloads_default_nightly-aks-github-integration-app-client-secret # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: nightly-github-integration-app-client-id # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: client-id # k8s key name
      remoteRef:
        key: workloads_default_nightly-github-integration-app-client-id # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: nightly-github-integration-app-client-secret # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: client-secret # k8s key name
      remoteRef:
        key: workloads_default_nightly-github-integration-app-client-secret # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-gardener-logs # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: service-account.json # k8s key name
      remoteRef:
        key: workloads_default_sa-gardener-logs # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-gcr-push-kyma-project # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: service-account.json # k8s key name
      remoteRef:
        key: workloads_default_sa-gcr-push-kyma-project # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-gke-kyma-integration # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: service-account.json # k8s key name
      remoteRef:
        key: workloads_default_sa-gke-kyma-integration # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-kyma-artifacts # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: service-account.json # k8s key name
      remoteRef:
        key: workloads_default_sa-kyma-artifacts # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-stability-fluentd-storage-writer # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: service-account.json # k8s key name
      remoteRef:
        key: workloads_default_sa-stability-fluentd-storage-writer # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-vm-kyma-integration # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: service-account.json # k8s key name
      remoteRef:
        key: workloads_default_sa-vm-kyma-integration # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sa-vm-kyma-ssh-key # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: google_compute_engine # k8s key name
      remoteRef:
        key: workloads_default_sa-vm-kyma-ssh-key # GCP secret name
        property: google_compute_engine # name of the field in the GCP secret
        version: latest
    - secretKey: google_compute_engine.pub # k8s key name
      remoteRef:
        key: workloads_default_sa-vm-kyma-ssh-key # GCP secret name
        property: google_compute_engine.pub # name of the field in the GCP secret
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sap-slack-bot-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_sap-slack-bot-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: skr-al-secret-key # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: secret.json # k8s key name
      remoteRef:
        key: workloads_default_skr-al-secret-key # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: slack-nightly-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: workloads_default_slack-nightly-token # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: weekly-github-integration-app-client-id # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: client-id # k8s key name
      remoteRef:
        key: workloads_default_weekly-github-integration-app-client-id # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: weekly-github-integration-app-client-secret # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: client-secret # k8s key name
      remoteRef:
        key: workloads_default_weekly-github-integration-app-client-secret # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: whitesource-apikey # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: apikey # k8s key name
      remoteRef:
        key: workloads_default_whitesource-apikey # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: whitesource-userkey # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: userkey # k8s key name
      remoteRef:
        key: workloads_default_whitesource-userkey # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kcp-client-credentials # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: KCP_TECH_USER_LOGIN # k8s key name
      remoteRef:
        key: workloads_default_kcp-client-credentials # GCP secret name
        property: KCP_TECH_USER_LOGIN # name of the field in the GCP secret
        version: latest
    - secretKey: KCP_TECH_USER_PASSWORD # k8s key name
      remoteRef:
        key: workloads_default_kcp-client-credentials # GCP secret name
        property: KCP_TECH_USER_PASSWORD # name of the field in the GCP secret
        version: latest
    - secretKey: KCP_OIDC_CLIENT_ID # k8s key name
      remoteRef:
        key: workloads_default_kcp-client-credentials # GCP secret name
        property: KCP_OIDC_CLIENT_ID # name of the field in the GCP secret
        version: latest
    - secretKey: KCP_OIDC_CLIENT_SECRET # k8s key name
      remoteRef:
        key: workloads_default_kcp-client-credentials # GCP secret name
        property: KCP_OIDC_CLIENT_SECRET # name of the field in the GCP secret
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: serverless-git-auth # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: GH_AUTH_PRIVATE_KEY # k8s key name
      remoteRef:
        key: workloads_default_serverless-git-auth-credentials # GCP secret name
        property: GH_AUTH_PRIVATE_KEY # name of the field in the GCP secret
        version: latest
    - secretKey: AZURE_DEVOPS_AUTH_USERNAME # k8s key name
      remoteRef:
        key: workloads_default_serverless-git-auth-credentials # GCP secret name
        property: AZURE_DEVOPS_AUTH_USERNAME # name of the field in the GCP secret
        version: latest
    - secretKey: AZURE_DEVOPS_AUTH_PASSWORD # k8s key name
      remoteRef:
        key: workloads_default_serverless-git-auth-credentials # GCP secret name
        property: AZURE_DEVOPS_AUTH_PASSWORD # name of the field in the GCP secret
        version: latest

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: signify-dev-secret # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: secret.yaml # k8s key name
      remoteRef:
        key: signify-dev-secret # GCP secret name
        version: latest

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-api-gateway-int-test-client-id # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: kyma-api-gateway-int-test-client-id # GCP secret name
        version: latest

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-api-gateway-int-test-client-secret # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: kyma-api-gateway-int-test-client-secret # GCP secret name
        version: latest
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyma-btp-manager-bot-github-token # name of the k8s external secret and the k8s secret
  namespace: default
spec:
  secretStoreRef:
    name: gcp-secretstore
    kind: ClusterSecretStore
  refreshInterval: "10m"
  target:
    deletionPolicy: "Delete" # delete secret when External Secret is deleted
  data:
    - secretKey: token # k8s key name
      remoteRef:
        key: kyma-btp-manager-bot-github-token # GCP secret name
        version: latest
